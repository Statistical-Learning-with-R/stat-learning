---
title: "Principal Components Analysis"
author: "YOUR NAME HERE"
format: 
  html:
    code-fold: true
    code-line-numbers: true
    code-tools: true
    self-contained: true
editor: visual
execute:
  message: false
---

## Setup

Declare your libraries:

```{r}
#| label: libraries-r
#| include: false
library(tidyverse)
library(tidymodels)
library(glmnet)
library(discrim)
library(rpart)
library(rpart.plot)
library(baguette)
```

## Data Prep

```{r}
cann <- read_csv("https://www.dropbox.com/s/s2a1uoiegitupjc/cannabis_full.csv?dl=1") %>% 
  drop_na()

cann_matrix <- cann %>%
  select(-Type, -Strain, -Effects, -Flavor, -Dry, -Mouth) %>%
  as.matrix()

cann_types <- cann %>% 
  pull(Type)
```

## Relevant code from Lecture

(You will need to change this for the Cannabis data!)

```{r}
fed %>%
  ggplot(mapping = aes(x = there, y = would, color = Author)) +
  geom_point()
```

PCA:

```{r}
pc <- prcomp(fed_matrix, 
             center = TRUE, 
             scale = TRUE)
```

Combinations of variables that create new axes:

```{r}
pc$rotation
```

Check out most important PCs:

```{r}
pc$rotation %>% 
  data.frame() %>%
  arrange(
    desc(
      abs(PC1)
      )
    )
```

Make a dataframe with PCs as columns:

```{r}
new_dims_df <- pc$x %>%
  as.data.frame() %>% 
  bind_cols(auths_known) %>% 
  rename(Author = `...71`)

new_dims_df
```

Plot first two PC dims:

```{r}
new_dims_df %>%
  ggplot(mapping = aes(x = PC1, y = PC2, color = Author)) +
  geom_point()
```

Standard deviations and variances:

```{r}
pc$sdev
```

```{r}
cumul_vars <- cumsum(pc$sdev^2)/sum(pc$sdev^2)
cumul_vars
```

## Try it!

1.  Apply PCA to the cannabis data

2.  Interpret the PC rotations

3.  Plot the data on the first two axes, and color by Type.

4.  Choose a "good" number of PCs to use.

5.  Fit a KNN classifier using:

-   All the variables
-   Only the 5 most important variables according to PCA
-   Only your chosen PCs

6.  Compare the accuracy of these three approaches!

```{r}
library(tidymodels)

rec_1 <- recipe(Type ~ ., data = cann) |>
  step_pca(threshold = 0.8)
```
